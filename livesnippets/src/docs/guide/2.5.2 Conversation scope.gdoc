Conversation scope is shared by a flow execution and all its (nested) subflows.
When again comparing flows with methods, then objects in conversation scope are similar to class properties.
This means that the same considerations need to be made when deciding to store an object in conversation scope or
passing it as subflow input or output. If the semantic meaning is the same in the flow and all of its subflows, you can use conversation scope.
Otherwise it is better to use [subflow input|guide:2.4.4.2 Subflow input] or [subflow output|guide:2.4.4.3 Subflow output].

{note}
If you are using a version of grails prior to 2.0.0, you can mimic subflow input and output by using flash scope to pass objects
because flash scope is more 'local' than conversation scope.
{note}

{note}
Objects in conversation scope are automatically merged into the view model when rendering a view. So you should omit the @conversation@
prefix when referencing these objects in a view.
{note}