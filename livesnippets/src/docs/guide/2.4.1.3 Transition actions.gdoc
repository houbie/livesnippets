Events can simply trigger the transition to a new state:
{groovySrc:class=ProjectController|from=on("add")|lines=1}
{groovySrc}

Or they can execute a closure before the transition takes place:
{groovySrc:class=ProjectController|from=projectInfo|lines=7}
{groovySrc}

Notice how calling @error()@ prevents the transition from happening. In this case the flow will stay in the @projectInfo@
state and the @projectInfo@ view will be rendered again with error messages.

Transition actions can return a model that will be merged into the fow scope:
{groovySrc:class=DeveloperController|from=on("select")|lines=3}
{groovySrc}

This model can then be used in the next state:
{groovySrc:class=DeveloperController|from=selected}
{groovySrc}

Transitions can also be made dynamic by using a closure in stead of a string to define the destination state:
{groovySrc:class=ProjectController|from=on("selected")|lines=10}
{groovySrc}
